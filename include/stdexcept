#ifndef _LIGHTCXX_GUARD_STDEXCEPT
#define _LIGHTCXX_GUARD_STDEXCEPT

#include <cstdlib>
#include <cstring>
#include <exception>

namespace std {

// TODO: Rewrite everything once string is implemented!

class logic_error : public exception {
    char* __what;

  public:
    explicit logic_error(const char* __msg) {
        auto __len = strlen(__msg);
        __what = static_cast<char*>(malloc(__len + 1));
        memcpy(__what, __msg, __len);
        __what[__len] = '\0';
    }

    ~logic_error() override;

    const char* what() const noexcept override {
        return __what;
    }
};

class domain_error : public logic_error {
  public:
    using logic_error::logic_error;

    ~domain_error() override;
};

class invalid_argument : public logic_error {
  public:
    using logic_error::logic_error;

    ~invalid_argument() override;
};

class length_error : public logic_error {
  public:
    using logic_error::logic_error;

    ~length_error() override;
};

class out_of_range : public logic_error {
  public:
    using logic_error::logic_error;

    ~out_of_range() override;
};

class runtime_error : public exception {
    char* __what;

  public:
    explicit runtime_error(const char* __msg) {
        auto __len = strlen(__msg);
        __what = static_cast<char*>(malloc(__len + 1));
        memcpy(__what, __msg, __len);
        __what[__len] = '\0';
    }

    ~runtime_error() override;

    const char* what() const noexcept override {
        return __what;
    }
};

class range_error : public runtime_error {
  public:
    using runtime_error::runtime_error;

    ~range_error() override;
};

class overflow_error : public runtime_error {
  public:
    using runtime_error::runtime_error;

    ~overflow_error() override;
};

class underflow_error : public runtime_error {
  public:
    using runtime_error::runtime_error;

    ~underflow_error() override;
};

}  // namespace std

#endif
