#ifndef _LIGHTCXX_GUARD_ANY
#define _LIGHTCXX_GUARD_ANY

#include <cstddef>
#include <cstdlib>
#include <initializer_list>
#include <memory>
#include <new>
#include <type_traits>
#include <typeinfo>
#include <utility>

namespace std {

class bad_any_cast : public bad_cast {
  public:
    ~bad_any_cast() override;

    const char* what() const noexcept override;
};

namespace _Light {

void* __any_alloc(size_t __align, size_t __size);

template<class _T>
inline constexpr bool __is_any_local_storage = alignof(_T) <= alignof(void*) && sizeof(_T) <= 3 * sizeof(void*) && is_nothrow_move_constructible_v<_T>;

union alignas(void*) _AnyStorage {
    void* __remote;
    char __local[3 * sizeof(void*)];

    constexpr _AnyStorage()
            : __remote(nullptr) {}

    template<class _T>
    _T* __addr() {
        if constexpr (__is_any_local_storage<_T>) {
            return reinterpret_cast<_T*>(__local);
        } else {
            return reinterpret_cast<_T*>(__remote);
        }
    }

    template<class _T>
    const _T* __addr() const {
        if constexpr (__is_any_local_storage<_T>) {
            return reinterpret_cast<const _T*>(__local);
        } else {
            return reinterpret_cast<const _T*>(__remote);
        }
    }
};

struct _AnyVTable {
    using __copy_t = void(const _AnyStorage&, _AnyStorage&);
    using __move_t = void(_AnyStorage&, _AnyStorage&) noexcept;
    using __dtor_t = void(_AnyStorage&) noexcept;

    bool __is_local;
    const type_info& __type;
    __copy_t* __copy;
    __move_t* __move;
    __dtor_t* __dtor;
};

template<class _T>
inline constexpr _AnyVTable _AnyVTableForType = {
  .__is_local = __is_any_local_storage<_T>,
  .__type = typeid(_T),
  .__copy = [](const _AnyStorage& __from, _AnyStorage& __to) {
      if constexpr (__is_any_local_storage<_T>) {
          new (__to.__addr<_T>()) _T(*__from.__addr<const _T>());
      } else {
          __to.__remote = __any_alloc(alignof(_T), sizeof(_T));
          try {
              new (__to.__addr<_T>()) _T(*__from.__addr<const _T>());
          } catch(...) {
              free(__to.__remote);
              throw;
          }
      } },
  .__move = [](_AnyStorage& __from, _AnyStorage& __to) noexcept {
      if constexpr (__is_any_local_storage<_T>) {
          if constexpr (is_move_constructible_v<_T>) {
              new (__to.__addr<_T>()) _T(move(*__from.__addr<_T>()));
          } else {
              new (__to.__addr<_T>()) _T(*__from.__addr<_T>());
          }
      } else {
          __to.__remote = __from.__remote;
      } },
  .__dtor = [](_AnyStorage& __obj) noexcept { __obj.__addr<_T>()->~_T(); },
};

template<class _T>
inline constexpr bool __is_in_place_type = false;

template<class _T>
inline constexpr bool __is_in_place_type<in_place_type_t<_T>> = true;

template<class _T, class... _Args>
void __construct_any(_Light::_AnyStorage& __storage, _Args&&... __args) {
    if constexpr (__is_any_local_storage<remove_const_t<_T>>) {
        new (static_cast<void*>(__storage.__local)) _T(forward<_Args>(__args)...);
    } else {
        __storage.__remote = _Light::__any_alloc(alignof(_T), sizeof(_T));
        try {
            new (__storage.__remote) _T(forward<_Args>(__args)...);
        } catch (...) {
            free(__storage.__remote);
            throw;
        }
    }
}

}  // namespace _Light

class any {
    const _Light::_AnyVTable* __vtable = nullptr;
    _Light::_AnyStorage __obj{};

  public:
    constexpr any() noexcept = default;

    any(const any& __other);
    any(any&& __other) noexcept;

    template<class _T>
        requires(!is_same_v<decay_t<_T>, any> && !_Light::__is_in_place_type<decay_t<_T>> && is_copy_constructible_v<decay_t<_T>>)
    any(_T&& __value)
            : __vtable(addressof(_Light::_AnyVTableForType<decay_t<_T>>)) {
        _Light::__construct_any<decay_t<_T>>(__obj, forward<_T>(__value));
    }

    template<class _T, class... _Args>
        requires(is_copy_constructible_v<decay_t<_T>> && is_constructible_v<decay_t<_T>, _Args...>)
    explicit any(in_place_type_t<_T>, _Args&&... __args)
            : __vtable(addressof(_Light::_AnyVTableForType<decay_t<_T>>)) {
        _Light::__construct_any<decay_t<_T>>(__obj, forward<_Args>(__args)...);
    }

    template<class _T, class _U, class... _Args>
        requires(is_copy_constructible_v<decay_t<_T>> && is_constructible_v<decay_t<_T>, initializer_list<_U>&, _Args...>)
    explicit any(in_place_type_t<_T>, initializer_list<_U> __il, _Args&&... __args)
            : __vtable(addressof(_Light::_AnyVTableForType<decay_t<_T>>)) {
        _Light::__construct_any<decay_t<_T>>(__obj, __il, forward<_Args>(__args)...);
    }

    ~any();

    any& operator=(const any& __rhs);
    any& operator=(any&& __rhs) noexcept;

    template<class _T>
        requires(!is_same_v<decay_t<_T>, any> && is_copy_constructible_v<decay_t<_T>>)
    any& operator=(_T&& __rhs) {
        if constexpr (is_nothrow_move_constructible_v<decay_t<_T>>) {
            reset();
            __vtable = addressof(_Light::_AnyVTableForType<decay_t<_T>>);
            _Light::__construct_any<decay_t<_T>>(__obj, forward<_T>(__rhs));
        } else {
            _Light::_AnyStorage __new_obj;
            _Light::__construct_any<decay_t<_T>>(__new_obj, forward<_T>(__rhs));
            reset();
            __vtable = addressof(_Light::_AnyVTableForType<decay_t<_T>>);
            _Light::_AnyVTableForType<decay_t<_T>>.__move(__new_obj, __obj);
        }
        return *this;
    }

    template<class _T, class... _Args>
        requires(is_copy_constructible_v<decay_t<_T>> && is_constructible_v<decay_t<_T>, _Args...>)
    decay_t<_T>& emplace(_Args&&... __args) {
        reset();
        _Light::__construct_any<decay_t<_T>>(__obj, forward<_Args>(__args)...);
        __vtable = addressof(_Light::_AnyVTableForType<decay_t<_T>>);
        return *__obj.__addr<decay_t<_T>>();
    }

    template<class _T, class _U, class... _Args>
        requires(is_copy_constructible_v<decay_t<_T>> && is_constructible_v<decay_t<_T>, initializer_list<_U>&, _Args...>)
    decay_t<_T>& emplace(initializer_list<_U> __il, _Args&&... __args) {
        reset();
        _Light::__construct_any<decay_t<_T>>(__obj, __il, forward<_Args>(__args)...);
        __vtable = addressof(_Light::_AnyVTableForType<decay_t<_T>>);
        return *__obj.__addr<decay_t<_T>>();
    }

    void reset() noexcept;

    void swap(any& __rhs) noexcept;

    bool has_value() const noexcept;

    const type_info& type() const noexcept;

    template<class _T>
    friend const _T* any_cast(const any* __a) noexcept;

    template<class _T>
    friend _T* any_cast(any* __a) noexcept;
};

void swap(any& __x, any& __y) noexcept;

template<class _T, class... _Args>
any make_any(_Args&&... __args) {
    return any(in_place_type<_T>, forward<_Args>(__args)...);
}

template<class _T, class _U, class... _Args>
any make_any(initializer_list<_U> __il, _Args&&... __args) {
    return any(in_place_type<_T>, __il, forward<_Args>(__args)...);
}

template<class _T>
const _T* any_cast(const any* __a) noexcept {
    if constexpr (is_same_v<remove_cv_t<_T>, void>) {
        return nullptr;
    } else {
        if (__a == nullptr || __a->type() != typeid(_T)) {
            return nullptr;
        }
        return __a->__obj.__addr<_T>();
    }
}

template<class _T>
_T* any_cast(any* __a) noexcept {
    if constexpr (is_same_v<remove_cv_t<_T>, void>) {
        return nullptr;
    } else {
        if (__a == nullptr || __a->type() != typeid(remove_cv_t<_T>)) {
            return nullptr;
        }
        return __a->__obj.__addr<remove_cv_t<_T>>();
    }
}

template<class _T>
_T any_cast(const any& __a) {
    using _VT = remove_cvref_t<_T>;
    static_assert(is_constructible_v<_T, const _VT&>);
    if (const _VT* __value = any_cast<_VT>(addressof(__a)); __value == nullptr) {
        throw bad_any_cast();
    } else {
        return static_cast<_T>(*__value);
    }
}

template<class _T>
_T any_cast(any& __a) {
    using _VT = remove_cvref_t<_T>;
    static_assert(is_constructible_v<_T, _VT&>);
    if (_VT* __value = any_cast<_VT>(addressof(__a)); __value == nullptr) {
        throw bad_any_cast();
    } else {
        return static_cast<_T>(*__value);
    }
}

template<class _T>
_T any_cast(any&& __a) {
    using _VT = remove_cvref_t<_T>;
    static_assert(is_constructible_v<_T, _VT>);
    if (_VT* __value = any_cast<_VT>(addressof(__a)); __value == nullptr) {
        throw bad_any_cast();
    } else {
        return static_cast<_T>(move(*__value));
    }
}

}  // namespace std

#endif
