#ifndef _LIGHTCXX_GUARD_BITSET
#define _LIGHTCXX_GUARD_BITSET

#include <_Light/bit.h>
#include <bit>
#include <cstdint>
#include <cstring>
#include <stdexcept>
#include <type_traits>

namespace std {

namespace _Light {

struct __bitset_neg_t {};

}  // namespace _Light

template<size_t _N>
class bitset {
    using __repr_t = conditional_t<
      _N <= _Light::__n_bits<uint8_t>(),
      uint8_t,
      conditional_t<
        _N <= _Light::__n_bits<uint16_t>(),
        uint16_t,
        conditional_t<
          _N <= _Light::__n_bits<uint32_t>(),
          uint32_t,
          conditional_t<
            _N <= _Light::__n_bits<uint64_t>(),
            uint64_t,
            unsigned long long>>>>;

    static inline constexpr size_t __repr_bits = _Light::__n_bits<__repr_t>();
    static inline constexpr __repr_t __full_mask = __repr_t(~__repr_t(0));

    using __iter_t = make_signed_t<size_t>;
    static inline constexpr __iter_t __extent = (_N + __repr_bits - 1) / __repr_bits;

    // Last entry in __storage might be shorter.
    static inline constexpr __repr_t __last_mask = _N % __repr_bits == 0 ? __full_mask : ((__repr_t(1) << (_N % __repr_bits)) - 1);

    __repr_t __storage[static_cast<size_t>(__extent)];

    constexpr bitset(_Light::__bitset_neg_t, const bitset& __other) {
        for (__iter_t __i = 0; __i < __extent; __i++) {
            __storage[__i] = ~__other.__storage[__i];
        }
    }

    __repr_t __last() const {
        return __storage[__extent - 1] & __last_mask;
    }

    __repr_t __first() const {
        if constexpr (__extent == 1) {
            return __last();
        } else {
            return __storage[0];
        }
    }

    void __unchecked_flip(size_t __pos) noexcept {
        __storage[__pos / __repr_bits] ^= __repr_t(__repr_t(1) << (__pos % __repr_bits));
    }

    void __unchecked_set(size_t __pos, bool __val) noexcept {
        if (__val) {
            __storage[__pos / __repr_bits] |= __repr_t(__repr_t(1) << (__pos % __repr_bits));
        } else {
            __storage[__pos / __repr_bits] &= __repr_t(~(__repr_t(1) << (__pos % __repr_bits)));
        }
    }

    bool __unchecked_test(size_t __pos) const noexcept {
        return bool(__storage[__pos / __repr_bits] & (__repr_t(1) << (__pos % __repr_bits)));
    }

  public:
    class reference {
        friend class bitset;

        bitset* __bitset;
        size_t __pos;

        reference(bitset* __bitset, size_t __pos)
                : __bitset(__bitset), __pos(__pos) {}

      public:
        reference(const reference&) = default;

        reference& operator=(bool __val) noexcept {
            __bitset->__unchecked_set(__pos, __val);
            return *this;
        }

        reference& operator=(const reference& __other) noexcept {
            return *this = static_cast<bool>(__other);
        }

        bool operator~() const noexcept {
            return !static_cast<bool>(*this);
        }

        operator bool() const noexcept {
            return __bitset->__unchecked_test(__pos);
        }

        reference& flip() noexcept {
            __bitset->__unchecked_flip(__pos);
            return *this;
        }
    };

    constexpr bitset() noexcept
            : __storage{} {}

    constexpr bitset(unsigned long long __val) noexcept
            : __storage{} {
        __storage[0] = static_cast<__repr_t>(__val);
    }

    bitset& operator&=(const bitset& __rhs) noexcept {
        for (__iter_t __i = 0; __i < __extent; __i++) {
            __storage[__i] &= __rhs.__storage[__i];
        }
        return *this;
    }

    bitset& operator|=(const bitset& __rhs) noexcept {
        for (__iter_t __i = 0; __i < __extent; __i++) {
            __storage[__i] |= __rhs.__storage[__i];
        }
        return *this;
    }

    bitset& operator^=(const bitset& __rhs) noexcept {
        for (__iter_t __i = 0; __i < __extent; __i++) {
            __storage[__i] ^= __rhs.__storage[__i];
        }
        return *this;
    }

    bitset& operator<<=(size_t __factor) noexcept {
        if (__factor == 0) {
            return *this;
        }
        if (__factor > _N) {
            memset(__storage, 0, sizeof(__storage));
            return *this;
        }
        // TODO: Check if compiler optimizes this. If not, optimize manually.
        for (size_t __i = _N - 1; __i >= __factor; __i--) {
            (*this)[__i] = (*this)[__i - __factor];
        }
        for (size_t __i = 0; __i < __factor; __i++) {
            (*this)[__i] = false;
        }
        return *this;
    }

    bitset& operator>>=(size_t __factor) noexcept {
        if (__factor == 0) {
            return *this;
        }
        if (__factor > _N) {
            memset(__storage, 0, sizeof(__storage));
            return *this;
        }
        // TODO: Check if compiler optimizes this. If not, optimize manually.
        for (size_t __i = 0; __i < _N - __factor; __i++) {
            (*this)[__i] = (*this)[__i + __factor];
        }
        for (size_t __i = _N - __factor; __i < _N; __i++) {
            (*this)[__i] = false;
        }
        return *this;
    }

    bitset& set() noexcept {
        memset(__storage, 0xFF, sizeof(__storage));
        return *this;
    }

    bitset& set(size_t __pos, bool __val = true) {
        if (__pos >= _N) {
            throw out_of_range("bitset: set out of range");
        }
        __unchecked_set(__pos, __val);
        return *this;
    }

    bitset& reset() noexcept {
        memset(__storage, 0, sizeof(__storage));
        return *this;
    }

    bitset& reset(size_t __pos) {
        if (__pos >= _N) {
            throw out_of_range("bitset: reset out of range");
        }
        __unchecked_set(__pos, false);
        return *this;
    }

    bitset operator~() const noexcept {
        return bitset(_Light::__bitset_neg_t{}, *this);
    }

    bitset& flip() noexcept {
        for (__iter_t __i = 0; __i < __extent; __i++) {
            __storage[__i] ^= __full_mask;
        }
        return *this;
    }

    bitset& flip(size_t __pos) {
        if (__pos >= _N) {
            throw out_of_range("bitset: flip out of range");
        }
        __unchecked_flip(__pos);
        return *this;
    }

    constexpr bool operator[](size_t __pos) const {
        return test(__pos);
    }

    reference operator[](size_t __pos) {
        return reference(this, __pos);
    }

    unsigned long to_ulong() const {
        if constexpr (sizeof(__repr_t) > sizeof(unsigned long)) {
            // TODO: numeric_limits<unsigned long>::max()!
            if (__storage[0] > static_cast<__repr_t>(static_cast<unsigned long>(-1))) {
                throw overflow_error("bitset: to_ulong overflow");
            }
        }
        if constexpr (__extent > 1) {
            for (__iter_t __i = 1; __i + 1 < __extent; __i++) {
                if (__storage[__i] != 0) {
                    throw overflow_error("bitset: to_ulong overflow");
                }
            }
            if (__last() != 0) {
                throw overflow_error("bitset: to_ulong overflow");
            }
        }
        return static_cast<unsigned long>(__first());
    }

    unsigned long long to_ullong() const {
        if constexpr (sizeof(__repr_t) > sizeof(unsigned long long)) {
            // TODO: numeric_limits<unsigned long long>::max()!
            if (__storage[0] > static_cast<__repr_t>(static_cast<unsigned long long>(-1))) {
                throw overflow_error("bitset: to_ullong overflow");
            }
        }
        if constexpr (__extent > 1) {
            for (__iter_t __i = 1; __i + 1 < __extent; __i++) {
                if (__storage[__i] != 0) {
                    throw overflow_error("bitset: to_ullong overflow");
                }
            }
            if (__last() != 0) {
                throw overflow_error("bitset: to_ullong overflow");
            }
        }
        return static_cast<unsigned long long>(__first());
    }

    size_t count() const noexcept {
        size_t __total = 0;
        for (__iter_t __i = 0; __i + 1 < __extent; __i++) {
            __total += size_t(popcount(__storage[__i]));
        }
        return __total + size_t(popcount(__last()));
    }

    constexpr size_t size() const noexcept {
        return _N;
    }

    bool operator==(const bitset& __rhs) const noexcept {
        bool result = __last() == __rhs.__last();
        if constexpr (__extent > 1) {
            result = result && (memcmp(__storage, __rhs.__storage, sizeof(__storage) - sizeof(__repr_t)) == 0);
        }
        return result;
    }

    bool test(size_t __pos) const {
        if (__pos >= _N) {
            throw out_of_range("bitset: test out of range");
        }
        return __unchecked_test(__pos);
    }

    bool all() const noexcept {
        for (__iter_t __i = 0; __i + 1 < __extent; __i++) {
            if (__storage[__i] != __full_mask) {
                return false;
            }
        }
        return __last() == __last_mask;
    }

    bool any() const noexcept {
        for (__iter_t __i = 0; __i + 1 < __extent; __i++) {
            if (__storage[__i] != static_cast<__repr_t>(0)) {
                return true;
            }
        }
        return __last() != 0;
    }

    bool none() const noexcept {
        for (__iter_t __i = 0; __i + 1 < __extent; __i++) {
            if (__storage[__i] != static_cast<__repr_t>(0)) {
                return false;
            }
        }
        return __last() == 0;
    }

    bitset operator<<(size_t __pos) const noexcept {
        bitset __ret = *this;
        __ret <<= __pos;
        return __ret;
    }

    bitset operator>>(size_t __pos) const noexcept {
        bitset __ret = *this;
        __ret >>= __pos;
        return __ret;
    }
};

// [bitset.operators], bitset operators
template<size_t _N>
bitset<_N> operator&(const bitset<_N>& __lhs, const bitset<_N>& __rhs) noexcept {
    return bitset<_N>(__lhs) &= __rhs;
}

template<size_t _N>
bitset<_N> operator|(const bitset<_N>& __lhs, const bitset<_N>& __rhs) noexcept {
    return bitset<_N>(__lhs) |= __rhs;
}

template<size_t _N>
bitset<_N> operator^(const bitset<_N>& __lhs, const bitset<_N>& __rhs) noexcept {
    return bitset<_N>(__lhs) ^= __rhs;
}

}  // namespace std

#endif
