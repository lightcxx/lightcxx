#ifndef _LIGHTCXX_GUARD_TYPEINFO
#define _LIGHTCXX_GUARD_TYPEINFO

#include <exception>

namespace std {

using size_t = decltype(sizeof(void*));

class type_info {
  public:
    type_info(const type_info&) = delete;
    type_info& operator=(const type_info&) = delete;

    virtual ~type_info();

    bool operator==(const type_info& __rhs) const noexcept;
    bool before(const type_info& __rhs) const noexcept;
    size_t hash_code() const noexcept;
    const char* name() const noexcept;

  private:
    const char* __name;
};

class bad_cast : public exception {
  public:
    bad_cast() noexcept;
    bad_cast(const bad_cast&) noexcept;
    bad_cast& operator=(const bad_cast&) noexcept;

    ~bad_cast() noexcept override;

    const char* what() const noexcept override;
};

class bad_typeid : public exception {
  public:
    bad_typeid() noexcept;
    bad_typeid(const bad_typeid&) noexcept;
    bad_typeid& operator=(const bad_typeid&) noexcept;

    ~bad_typeid() noexcept override;

    const char* what() const noexcept override;
};

}  // namespace std

#endif
