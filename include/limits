#ifndef _LIGHTCXX_GUARD_LIMITS
#define _LIGHTCXX_GUARD_LIMITS

namespace std {

enum float_round_style {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3,
};

enum float_denorm_style {
    denorm_indeterminate = -1,
    denorm_absent = 0,
    denorm_present = 1,
};

template<class _T>
struct numeric_limits {
    static constexpr bool is_specialized = false;
    static constexpr _T min() noexcept {
        return _T();
    }
    static constexpr _T max() noexcept {
        return _T();
    }
    static constexpr _T lowest() noexcept {
        return _T();
    }

    static constexpr int digits = 0;
    static constexpr int digits10 = 0;
    static constexpr int max_digits10 = 0;
    static constexpr bool is_signed = false;
    static constexpr bool is_integer = false;
    static constexpr bool is_exact = false;
    static constexpr int radix = 0;
    static constexpr _T epsilon() noexcept {
        return _T();
    }
    static constexpr _T round_error() noexcept {
        return _T();
    }

    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;

    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr _T infinity() noexcept {
        return _T();
    }
    static constexpr _T quiet_NaN() noexcept {
        return _T();
    }
    static constexpr _T signaling_NaN() noexcept {
        return _T();
    }
    static constexpr _T denorm_min() noexcept {
        return _T();
    }

    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = false;
    static constexpr bool is_modulo = false;

    static constexpr bool traps = false;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
};

template<class _T>
struct numeric_limits<const _T> : numeric_limits<_T> {};
template<class _T>
struct numeric_limits<volatile _T> : numeric_limits<_T> {};
template<class _T>
struct numeric_limits<const volatile _T> : numeric_limits<_T> {};

template<>
struct numeric_limits<bool> {
    static constexpr bool is_specialized = true;
    static constexpr bool min() noexcept {
        return false;
    }
    static constexpr bool max() noexcept {
        return true;
    }
    static constexpr bool lowest() noexcept {
        return false;
    }

    static constexpr int digits = 1;
    static constexpr int digits10 = 0;
    static constexpr int max_digits10 = 0;

    static constexpr bool is_signed = false;
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr bool epsilon() noexcept {
        return 0;
    }
    static constexpr bool round_error() noexcept {
        return 0;
    }

    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;

    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr bool infinity() noexcept {
        return 0;
    }
    static constexpr bool quiet_NaN() noexcept {
        return 0;
    }
    static constexpr bool signaling_NaN() noexcept {
        return 0;
    }
    static constexpr bool denorm_min() noexcept {
        return 0;
    }

    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = false;

    static constexpr bool traps = false;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
};

template<>
struct numeric_limits<char> : numeric_limits<void*> {};

template<>
struct numeric_limits<signed char> : numeric_limits<void*> {};

template<>
struct numeric_limits<unsigned char> : numeric_limits<void*> {};

template<>
struct numeric_limits<char8_t> : numeric_limits<void*> {};

template<>
struct numeric_limits<char16_t> : numeric_limits<void*> {};

template<>
struct numeric_limits<char32_t> : numeric_limits<void*> {};

template<>
struct numeric_limits<wchar_t> : numeric_limits<void*> {};

template<>
struct numeric_limits<short> : numeric_limits<void*> {};

template<>
struct numeric_limits<int> : numeric_limits<void*> {};

template<>
struct numeric_limits<long> : numeric_limits<void*> {};

template<>
struct numeric_limits<long long> : numeric_limits<void*> {};

template<>
struct numeric_limits<unsigned short> : numeric_limits<void*> {};

template<>
struct numeric_limits<unsigned int> : numeric_limits<void*> {};

template<>
struct numeric_limits<unsigned long> : numeric_limits<void*> {};

template<>
struct numeric_limits<unsigned long long> : numeric_limits<void*> {};

template<>
struct numeric_limits<float> : numeric_limits<void*> {};

template<>
struct numeric_limits<double> : numeric_limits<void*> {};

template<>
struct numeric_limits<long double> : numeric_limits<void*> {};

}  // namespace std

#endif
